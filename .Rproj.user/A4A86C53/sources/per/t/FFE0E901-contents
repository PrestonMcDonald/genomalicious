#' Create a scatter plot of a PCA on genotypes
#'
#' Plots the results of a PCA. Can accept an object of class \code{prcomp},
#' but can also take wide-format tabular data. Points can be coloured by
#' population.
#'
#' @param dat Prcomp/Data table/Data frame/Matrix: Contains the PCA scores for
#' each individual. If not using a \code{prcomp} object, the tabular data must
#' be wide-format: rows are indivdiuals, columns are PC axes. See also
#' \code{pca_DTinds()} to perform PCA on SNP genotypes.
#'
#' @param axisIndex Integer: Vector of lenght = 2. Corresponds to the column
#' index to plots, i.e. the PC axes. Default = \code{c(1,2)}, the first and second
#' PC axis column tabulated in \code{dat}.
#'
#' @param pops Character: A vector of population ID, should match the
#' rows in \code{dat}, but is an optional argument. Default = \code{NULL}.
#' If \code{dat} is a \code{prcomp} object, function will search for \code{dat$pops}
#' to assign to this argument.
#'
#' @param popCols Character: A vector of colours to use for each unique population
#' in \code{pops}, but is an optional argument. Default = \code{NULL}.
#' The name of each colour must correspond to a population in \code{pops}.
#'
#' @param look Character: The look of the plot. Default = \code{'ggplot'}, the
#' typical gray background with gridlines produced by \code{ggplot2}. Alternatively,
#' when set to \code{'classic'}, produces a base R style plot.
#'
#' @return Produces the PCA scatter plot, and also returns a
#' \code{gg}/\code{ggplot} object.
#'
#' @examples
#' # Data
#' data(genomalicious4pops)
#'
#' # Conduct the PCA with Patterson et al.'s (2006) normalisation, and
#' # population specified
#' pca <- pca_DTinds(dat=genomalicious4pops, scaling='patterson', popCol='POP')
#'
#' # Plot the PCA
#' pca_scatter(pca)
#'
#' # Get more specific
#' pca_scatter(pca
#'             , axisIndex=c(2,3)
#'             , pops=pca$pops
#'             , popCols=c(Pop1='gray30', Pop2='royalblue', Pop3='palevioletred3', Pop4='plum2')
#'             , look='classic')
#' @export


pca_scatter <- function(dat, axisIndex=c(1,2), pops=NULL, popCols=NULL
                     , look='ggplot', ...){

  # --------------------------------------------+
  # Libraries and assertions
  # --------------------------------------------+
  for(lib in c('data.table', 'ggplot2')){ require(lib, character.only = TRUE)}

  # Check the dat is the correct data class
  if(class(dat)!='prcomp' & !class(dat)[1]%in%c('data.table','data.frame','matrix')){
    stop('Argument dat must be one of the following object classes:
         prcomp, data.table, data.frame, or matrix')
  }

  # Check that axisIndex is only length == 2
  if(length(axisIndex)>2){
    stop('Argument axisIndex should only contain two integer values.')
  }

  # Check that look is ggplot or classic.
  if(!look%in%c('ggplot', 'classic')){
    stop("Argument look is not one of: 'ggplot' or 'classic'.")
  }

  # If dat is a prcomp obect, and if there is a $pops index in dat,
  # assign the pops variable the $pops.
  if(class(dat)=='prcomp'){
    if(is.null(dat$pops)==FALSE){ pops <- dat$pops}
  }

  # Check that specified populations in popCols are all in pops.
  if(is.null(pops)==FALSE & is.null(popCols)==FALSE &
     !sum(names(popCols)%in%unique(pops))==length(unique(pops))){
    stop("Argument popCols misspecified: names of colours must be in argument pops.")
  }

  # Set the plot theme by look
  if(look=='ggplot'){
    plot.theme <- theme_gray() + theme(legend.position='top')
  } else if(look=='classic'){
    plot.theme <- theme_bw() + theme(panel.grid.major=element_blank()
                                     , panel.grid.minor=element_blank()
                                     , text=element_text(colour='black')
                                     , legend.position='top')
  }

  # Make dat a data table of PC scores
  if(class(dat)=='prcomp'){ plot.tab <- as.data.table(dat$x)
  } else{ plot.tab <- as.data.table(dat) }

  # If pops has been assigned, add this as a column to new dat
  if(is.null(pops)==FALSE){
    plot.tab$POPS <- pops
  }

  # --------------------------------------------+
  # Code
  # --------------------------------------------+

  # Get axes
  axX <- colnames(plot.tab)[axisIndex[1]]
  axY <- colnames(plot.tab)[axisIndex[2]]

  # Create skeleton of plot
  gg <- ggplot(plot.tab, aes_string(x=axX, y=axY)) + plot.theme

  # Add points and population colours if specified
  if(is.null(pops)==TRUE){ gg <- gg + geom_point()
  } else if(is.null(pops)==FALSE & is.null(popCols)==TRUE){
    gg <- gg + geom_point(aes(colour=POPS)) + labs(colour=NULL)
  } else if(is.null(pops)==FALSE & is.null(popCols)==FALSE){
    gg <- gg + geom_point(aes(colour=POPS)) + scale_colour_manual(values=popCols) + labs(colour=NULL)
  }

  # Plot and return
  plot(gg)
  return(gg)
}
