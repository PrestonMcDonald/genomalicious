#' Permutation significance test for Weir & Cockerham's FST
#'
#' Tests whether an observed FST value is greater than what could
#' be observed if samples were randomly permuted among populations.
#'
#' @param dat Data table: A long format data table of biallelic genotypes,
#' coded as '/' separated alleles ('0/0', '0/1', '1/1'), or counts
#' of the Alt alleles (0, 1, 2, repsectively).
#' Four columns are required:
#' \enumerate{
#'    \item The population ID (see param \code{popCol}).
#'    \item The sampled individual ID (see param \code{sampCol}).
#'    \item The locus ID (see param \code{locusCol}).
#'    \item The genotype (see param \code{genoCol}).
#' }
#'
#' @param popCol Character: The column name with the population information.
#' Default = \code{'POP'}.
#'
#' @param sampCol Character: The column name with the sampled individual information.
#' Default = \code{'SAMPLE'}.
#'
#' @param locusCol Character: The column name with the locus information.
#' Default = \code{'LOCUS'}.
#'
#' @param genoCol Character: The column name with the genotype information.
#' Default = \code{'GT'}.
#'
#' @param perms Integer: The number of permutations to conduct. Default = 100.
#'
#' @return Returns a vector of permuted mean FST values (estimated across
#' all loci).
#'
#' @references
#' Weir, Cockerham (1984) Estimating F-statistics for the analysis of population structure. Evol. \cr
#' Weir, Hill (2002) Estimating F-statistics. Annu. Rev. Genet.
#'
#' @export
fstWC_permgenos <- function(dat, popCol='POP', sampCol='SAMPLE', locusCol='LOCUS'
                            , genoCol='GT', perms=100){

  # Sample size matrix
  samp_size <- as.matrix(spread(dat[, length(SAMPLE), by=c('POP', 'LOCUS')]
                              , key=LOCUS, value=V1)
                       , rownames='POP')

  # Get sample and population data
  samp_pops <- unique(dat[, c('SAMPLE', 'POP')])

  fst_perm <- unlist(lapply(1:perms, function(i){
    # Shuffle populations
    perm_pops <- copy(samp_pops)
    perm_pops$POP <- sample(samp_pops$POP, replace=FALSE)
    # Get permuted genotypes and frequencies
    perm_genos <- data.table(perm_pops[match(dat$SAMPLE, perm_pops$SAMPLE)]
                             , dat[, c('LOCUS', 'GT')])
    perm_freqs <- genos2freqs(perm_genos, popCol='POP', sampCol='SAMPLE'
                              , locusCol='LOCUS', genoCol='GT', returnMat=TRUE)
    # The mean permuted FST
    return(fstWC_freqs(freqMat=perm_freqs, sampMat=samp_size[, colnames(perm_freqs)])$fst.mean)
  }))

  return(fst_perm)
}
