#' Convert a mitogenome GENBANK file into a Data table
#'
#' This function reads in a GENBANK file and outputs an R data.table object.
#' It has been written for the import of mitogenome data into R, but could be
#' used for importing other GENBANK files (not rigorously tested).
#'
#' @param genbankFile Chracter: the path to the GENBANK file.
#'
#' @param type_vec Chracter: a vector of features to extract. The default value
#' has been set to extract the major elements of mitochondrial genomes, but
#' it could be edited to extract other features. Default is
#' \code{c('gene', 'CDS', 'tRNA', 'rRNA', 'D-loop')}.
#'
#' @return Returns a data.table with the following columns: \cr
#' \enumerate{
#'   \item \code{$NAME} = The name of the genetic feature.
#'   \item \code{$TYPE} = The type of genetic feature.
#'   \item \code{$STRAND} = Is given a 1 for the reported strand, and a -1
#'   if it is on the complementary strand.
#'   \item \code{$START} = The starting base position.
#'   \item \code{$END} = The end base position.
#' }
#'
#' @export
mitoGbk2DT <- function(genbankFile, type_vec=c('gene', 'CDS', 'tRNA', 'rRNA', 'D-loop')){
  require(data.table)
  require(tidyverse)
  require(stringr)

  # Read in lines
  gbk <- readLines(genbankFile)

  # Start and end of features
  ft.st <- grep('FEATURES', gbk)
  ft.end <- grep('ORIGIN', gbk)

  # Subset the features out of GENBANK file
  ft.data <- gbk[ft.st:(ft.end-1)]

  # The positions of the elements
  ele.pos <- lapply(paste0(' ', type_vec, ' '), grep, x=ft.data) %>%
    unlist() %>% sort()

  # List of elements
  elementList <- list()

  # Iterature through each ith element number
  for(i in 1:length(ele.pos)){
    # Lines for the ith element
    if(i != length(ele.pos)){
      x <- ele.pos[i]
      y <- ele.pos[i+1]-1
    } else{
      x <- ele.pos[i]
      y <- length(ft.data)
    }

    # Subset feature data for ith element
    ft.sub <- ft.data[x:y]

    # The type
    sub.type <- type_vec[
      lapply(type_vec, grep, x=ft.sub[1]) %>%
        lapply(., length) %>%
        unlist() %>%
        as.logical()]

    # The nucleotide start and stop bases
    sub.st.end <- strsplit(ft.sub[1], sub.type)[[1]] %>%
      trimws() %>%
      .[2]

    # The strand
    if(grepl('complement', x=sub.st.end)){
      sub.strand <- -1L
      sub.st.end <- gsub('complement', '', sub.st.end) %>%
        gsub('\\(', '', .) %>%
        gsub('\\)', '', .)
    } else{
      sub.strand <- 1L
    }

    # Adjust the start and stop bases
    sub.st.end <- strsplit(sub.st.end, '\\.\\.')[[1]] %>% as.integer()

    # The gene
    if(sub.type=='tRNA'){
      sub.name <- ft.sub[grep('product=', ft.sub)] %>%
        strsplit(., '/product=') %>%
        unlist() %>%
        trimws() %>%
        paste(., collapse='') %>%
        gsub('\"', '', .)
    } else if(sub.type %in% c('gene', 'CDS')){
      sub.name <- ft.sub[grep('gene=', ft.sub)] %>%
        strsplit(., '/gene=') %>%
        unlist() %>%
        trimws() %>%
        paste(., collapse='') %>%
        gsub('\"', '', .)
    } else if(sub.type=='D-loop'){
      sub.name <- 'D-loop'
    }

    # Add to list
    elementList[[i]] <- data.table(
      NAME=sub.name, TYPE=sub.type, STRAND=sub.strand,
      START=sub.st.end[1], END=sub.st.end[2])
  }

  # Output
  elementList %>% do.call('rbind',. ) %>% return()
}
