roxygenise(clean=TRUE) # Sometimes this throws an error?
library(genomalicious)
dat=indseq
library(genomalicious)
# Create a link to raw external datasets in genomalicious
genomaliciousExtData <- paste0(find.package('genomalicious'), '/extdata')
# This command here shows you the VCF file that comes with genomalicious
list.files(path=genomaliciousExtData, pattern='indseq.vcf')
# Use this to create a path to that file
vcfPath <- paste0(genomaliciousExtData, '/data_indseq.vcf')
# Import the VCF
indseq <- vcf2DT(vcfPath)
indseq
# Sites with missing data
indseq$GT[sample(1:nrow(indseq), round(nrow(indseq)*0.15), FALSE)] <- NA
indseq
dat=indseq
sampCol='SAMPLE'
locusCol='LOCUS'
popCol=NULL
dat.spl <- split(dat, by='LOCUS')
dat.spl
dat.spl <- split(dat, by=c('LOCUS','POP'))
popCol='POP'
dat.spl <- split(dat, by=c('LOCUS','POP'))
dat
data(data_4pops)
data_4pop$GT[sample(1:nrow(data_4pop), round(nrow(data_4pop)*0.15), FALSE)] <- NA
data(data_4pops)
data_4pop$GT[sample(1:nrow(data_4pop), round(nrow(data_4pop)*0.15), FALSE)] <- NA
data(data_4pops)
data_4pops$GT[sample(1:nrow(data_4pops), round(nrow(data_4pops)*0.15), FALSE)] <- NA
dat.spl <- split(dat, by='LOCUS')
dat <- data_4pop %>% copy
dat <- data_4pops %>% copy
dat.spl <- split(dat, by='LOCUS')
dat.spl <- split(dat, by=c('LOCUS','POP'))
dat.spl
sample(1:3, 100, T) -> x
tab <- sort(table(x))
tab
return(names(tab)[length(tab)])
names(tab)[length(tab)]
names(tab)[length(tab)]
class(x)
# --------------------------------------------+
# Internal functions
# --------------------------------------------+
FUN_common_geno <- function(x){
xclass <- class(x)
tab <- sort(table(x))
xcommon <- names(tab)[length(tab)]
return(as.integer(xcommon))
}
dat[, FUN_common_geno(GT), by=LOCUS]
dat[, FUN_common_geno(GT), by=c('LOCUS','POP')]
datGenos <- dat[!is.na(GT)]
datMiss <- dat[is.na(GT)]
datMiss <- dat[is.na(GT), !'GT']
datMiss
genoCommTab <- dat[, FUN_common_geno(GT), by=c('LOCUS','POP')]
left_join(datMiss, genoCommTab)
genoCommTab <- dat[, .(GT=FUN_common_geno(GT)), by=c('LOCUS','POP')]
left_join(datMiss, genoCommTab)
datGenos <- dat[!is.na(GT)]
datMiss <- dat[is.na(GT), !'GT']
rbind(datGenos, left_join(datMiss, genoCommTab))
rbind(datGenos, left_join(datMiss, genoCommTab)) %>%
setorder(., LOUCS, SAMPLE)
rbind(datGenos, left_join(datMiss, genoCommTab)) %>%
setorder(., LOCUS, SAMPLE)
colnames(dat)[match(c(sampCol, locusCol, genoCol), colnames(dat))]
genoCol='GT'
locusCol='LOCUS'
sampCol='SAMPLE'
colnames(dat)[match(c(sampCol, locusCol, genoCol), colnames(dat))]
colnames(dat)[match(c(sampCol, locusCol, genoCol), colnames(dat))] <- c('SAMPLE','LOCUS','GT')
popCol='POP'
colnames(dat)[match(c(sampCol, locusCol, genoCol, popCol), colnames(dat))]
#' Replace missing genotypes
#'
#' For each locus, missing genotypes are replaced with the most common
#' genotype. Can be done across all sampled individuals or by population.
#' Loci must be biallelic.
#'
#' NOTE: it is recommended that missing genotypes are imputed,
#' but if you need a quick-and-dirty approach, this function might be
#' useful for preliminary analyses, or if missing data is very low.
#'
#' @param dat Data table: A long data table, e.g. like that imported from
#' \code{vcf2DT}. Genotypes can be coded as '/' separated characters
#' (e.g. '0/0', '0/1', '1/1'), or integers as Alt allele counts (e.g. 0, 1, 2).
#' Must contain the following columns,
#' \enumerate{
#'   \item The sampled individuals (see param \code{sampCol}).
#'   \item The locus ID (see param \code{locusCol}).
#'   \item The genotype column (see param \code{genoCol}).
#' }
#'
#' @param sampCol Character: The column name with the sampled individual information.
#' Default is \code{'SAMPLE'}.
#'
#' @param locusCol Character: The column name with the locus information.
#' Default is \code{'LOCUS'}.
#'
#' @param genoCol Character: The column name with the genotype information.
#' Default is \code{'GT'}.
#'
#' @param popCol Character: An optional argument. The column name with the
#' population information. Default is \code{NULL}. If specified, genotype
#' replacement at each locus is done per population, not across all
#' sampled individuals.
#'
#' @details If genotypes are coded as characters, \code{NA} or \code{'./.'}
#' should be used to code missing genotypes. Otherwise if genotypes
#' are coded as integers, \code{NA} should code missing genotypes.
#' Whether the most common genotype is estimated across individuals or
#' for each population depends on parameterisation of \code{popCol}.
#'
#' @examples
#' library(genomalicious)
#'
#' data(data_4pops)
#'
#' # Sites with missing data
#' data_4pops$GT[sample(1:nrow(data_4pops), round(nrow(data_4pops)*0.15), FALSE)] <- NA
#'
#' # Replace genotypes using the mode across all individuals
#' data_4pops_mode_all <- replace_miss_genos(
#'     dat=data_4pops
#'     , sampCol='SAMPLE'
#'     , locusCol='LOCUS'
#'     , popCol=NULL
#'     , methodReplace='mode')
#'
#' # Replace genotypes using the mode within each population
#' data_4pops_mode_pops <- replace_miss_genos(
#'     dat=data_4pops
#'     , sampCol='SAMPLE'
#'     , locusCol='LOCUS'
#'     , popCol='POP'
#'     , methodReplace='mode')
#'
#' # Replace genotypes using the median within each population
#' data_4pops_med_pops <- replace_miss_genos(
#'     dat=data_4pops
#'     , sampCol='SAMPLE'
#'     , locusCol='LOCUS'
#'     , popCol='POP'
#'     , methodReplace='median')
#'
#' # Compare between methods
#' cbind(data_4pops_mode_all[genomiss, GT]
#'     , data_4pops_mode_pops[genomiss, GT]
#'     , data_4pops_med_pops[genomiss, GT])
#'
#' @export
replace_miss_genos <- function(dat
, sampCol='SAMPLE'
, locusCol='LOCUS'
, genoCol='GT'
, popCol=NULL
, methodReplace='mode'){
# BEGIN ...........
# --------------------------------------------+
# Libraries and assertions
# --------------------------------------------+
require(data.table)
# Get the class of the genotypes
gtClass <- class(dat[[genoCol]])
# Check that genotypes are characters or counts
if(!gtClass %in% c('character', 'numeric', 'integer')){
stop("Check that genotypes are coded as '/' separated characters or as
counts of the Alt allele. See: ?replace_miss_genos")
}
# Turn missing data into NAs if genotypes are characters
if(gtClass=='character'){
dat[[genoCol]][dat[[genoCol]]=='./.'] <- NA
}
# Convert numeric genotypes into integers
if(gtClass=='numeric'){
dat[[genoCol]] <- as.integer(dat[[genoCol]])
}
# Rename columns
if(is.null(popCol)){
if(sum(colnames(dat) %in% c(sampCol, locusCol, genoCol))!=3){
stop('Arguments `sampCol`, `locusCol`, and `genoCol` must all be
column names in argument `dat`. See ?replace_miss_genos')
}
colnames(dat)[match(c(sampCol, locusCol, genoCol), colnames(dat))] <- c('SAMPLE','LOCUS','GT')
} else if(!is.null(popCol)){
if(sum(colnames(dat) %in% c(sampCol, locusCol, genoCol, popCol))!=4){
stop('Arguments `sampCol`, `locusCol`, `genoCol`, and `popCol` must all be
column names in argument `dat`. See ?replace_miss_genos')
}
colnames(dat)[match(c(sampCol, locusCol, genoCol, popCol), colnames(dat))] <- c('SAMPLE','LOCUS','GT','POP')
}
# --------------------------------------------+
# Internal functions
# --------------------------------------------+
FUN_common_geno <- function(x){
xclass <- class(x)
tab <- sort(table(x))
xcommon <- names(tab)[length(tab)]
return(as.integer(xcommon))
}
# --------------------------------------------+
# Code
# --------------------------------------------+
if(is.null(popCol)){
genoCommTab <- dat[, .(GT=FUN_common_geno(GT)), by=LOCUS]
} else if(!is.null(popCol)){
genoCommTab <- dat[, .(GT=FUN_common_geno(GT)), by=c('LOCUS','POP')]
}
datGenos <- dat[!is.na(GT)]
datMiss <- dat[is.na(GT), !'GT']
rbind(datGenos, left_join(datMiss, genoCommTab)) %>%
setorder(., LOCUS, SAMPLE) %>%
return()
# .......... END
}
data_4pops[, MISS:=if_else(is.na(GT), TRUE, FALSE)]
data_4pops
data_4pops[MISS==TRUE]
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT'
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT'
)
replaceAllInds
replaceInPops <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT',
popCol='POP
)
replaceInPops
replaceInPops
replaceInPops <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT',
popCol='POP
)
replaceInPops <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT',
popCol='POP'
)
, replaceInPops[MISS==TRUE, GT])
cbind(data_4pops[MISS==TRUE, GT]
, replaceAllInds[MISS==TRUE, GT]
, replaceInPops[MISS==TRUE, GT])
cbind(data_4pops[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE)
, replaceAllInds[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE)
, replaceInPops[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE))
cbind(data_4pops[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE),
replaceAllInds[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE),
replaceInPops[MISS==TRUE, GT] %>% setorder(., LOCUS, SAMPLE))
)
cbind(
data_4pops[MISS==TRUE, GT] ,
replaceAllInds[MISS==TRUE, GT.INDS],
replaceInPops[MISS==TRUE, GT.POPS]
)
replaceAllInds
replaceInPops
cbind(
data_4pops[MISS==TRUE, GT] ,
replaceAllInds[MISS==TRUE, GT.INDS],
replaceInPops[MISS==TRUE, GT.POPS]
)
replaceInPops
# Sites with missing data
data_4pops$GT[sample(1:nrow(data_4pops), round(nrow(data_4pops)*0.15), FALSE)] <- NA
# Mark the loci + sample combinations with missing data
data_4pops[, MISS:=if_else(is.na(GT), TRUE, FALSE)]
data_4pops[MISS==TRUE]
# Replace genotypes using most common genotype across all individuals
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT'
) %>%
.[, GT.INDS:=GT]
# Replace genotypes using most common genotype in each population
replaceInPops <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT',
popCol='POP'
) %>%
.[, GT.POPS:=GT]
# Compare between methods
cbind(
data_4pops[MISS==TRUE, GT] ,
replaceAllInds[MISS==TRUE, GT.INDS],
replaceInPops[MISS==TRUE, GT.POPS]
)
data_4pops[MISS==TRUE, GT] %>%
setorder(., LOCUS, SAMPLE) %>%
data.table()
data_4pops[MISS==TRUE, GT] %>%
setorder(., LOCUS, SAMPLE) %>%
data.table()
)
cbind(
data_4pops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT'],
replaceAllInds[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.INDS'],
replaceInPops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.POPS']
)
cbind(
data_4pops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT'],
replaceAllInds[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.INDS'],
replaceInPops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.POPS']
)
cbind(
data_4pops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT'],
replaceAllInds[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.INDS'],
replaceInPops[MISS==TRUE] %>%
setorder(., LOCUS, SAMPLE) %>%
.[, 'GT.POPS']
) %>%
.[GT.INDS==GT.POPS]
data(data_4pops)
data_4pops
data_4pops[, GT.MISS:=GT]
data_4pops[, GT.MISS:=GT]
data_4pops$GT.MISS[sample(1:nrow(data_4pops), round(nrow(data_4pops)*0.15), FALSE)] <- NA
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., GT.MISS, GT.INDS)
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., GT.MISS, GT.INDS)
setnames(., 'GT.MISS', 'GT.INDS')
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., 'GT.MISS', 'GT.INDS')
data_4pops[, GT.MISS:=GT]
data_4pops$GT.MISS[sample(1:nrow(data_4pops), round(nrow(data_4pops)*0.15), FALSE)] <- NA
replaceAllInds <- replace_miss_genos(
dat=data_4pops, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., 'GT.MISS', 'GT.INDS')
data(data_4pops)
data_4pops
data_4pops[, GT.MISS:=GT]
data_4pops
D[sample(nrow(D), 0.1*nrow(D), FALSE), GT:=NA]
D[sample(nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA]
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA]
sample(1:nrow(D), round(0.1*nrow(D)), FALSE)
1:nrow(D)
D <- data_4pops %>% copy
D
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA]
D.rep.inds <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT'
)
D.rep.inds
D.rep.pops <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT', popCol='POP'
)
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
D
D
D$GT.MISS
D <- data_4pops %>% copy
# Sites with missing data
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
D
D
data(data_4pops)
D <- data_4pops %>% copy
# Sites with missing data
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
D
D
D.rep.inds <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT'
) %>%
setnames(., 'GT', 'GT.INDS')
D <- data_4pops %>% copy
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
D.rep.inds <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., 'GT', 'GT.INDS')
# Replace within populations
D.rep.pops <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS', popCol='POP'
) %>%
setnames(., 'GT', 'GT.POPS')
left_join(
data_4pops[., c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
)
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
)
.[is.na(GT.MISS)]
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS)]
left_join(
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS'] %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.POPS')])
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS'] %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) %>%
left_join(., D.rep.pops[,c('LOCUS','SAMPLE','POP','GT.POPS')])
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS']
D
D <- data_4pops %>% copy
# Sites with missing data
D[sample(1:nrow(D), round(0.01*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
# Replace across individuals
D.rep.inds <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., 'GT', 'GT.INDS')
# Replace within populations
D.rep.pops <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS', popCol='POP'
) %>%
setnames(., 'GT', 'GT.POPS')
# Compare
left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS'] %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) %>%
left_join(., D.rep.pops[,c('LOCUS','SAMPLE','POP','GT.POPS')])
compReplace[GT==GT.INDS]
compReplace <- left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS'] %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) %>%
left_join(., D.rep.pops[,c('LOCUS','SAMPLE','POP','GT.POPS')])
compReplace[GT==GT.INDS]
compReplace[GT==GT.INDS] %>% nrow
compReplace[GT==GT.POPS] %>% nrow
data(data_4pops)
D <- data_4pops %>% copy
# Sites with missing data
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] %>%
setnames(., 'GT', 'GT.MISS')
# Replace across individuals
D.rep.inds <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) %>%
setnames(., 'GT', 'GT.INDS')
# Replace within populations
D.rep.pops <- replace_miss_genos(
dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS', popCol='POP'
) %>%
setnames(., 'GT', 'GT.POPS')
# Compare
compReplace <- left_join(
data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) %>%
.[is.na(GT.MISS), !'GT.MISS'] %>%
left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) %>%
left_join(., D.rep.pops[,c('LOCUS','SAMPLE','POP','GT.POPS')])
compReplace[GT==GT.INDS] %>% nrow
compReplace[GT==GT.POPS] %>% nrow
compReplace[GT==GT.INDS] %>% nrow
compReplace[GT==GT.POPS] %>% nrow
nrow(compReplace)
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make documents
roxygenise(clean=TRUE) # Sometimes this throws an error?
library(genomalicious)
library(genomalicious)
