library(genomalicious)
data("data_4pops")
dat <- data_4pops
dat[, sum(GT)/(length(GT)*2), by=c('POP','LOCUS')]
dat[, sum(GT==1)/length(GT), by=c('POP','LOCUS')]
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')]
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
)
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., .[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
)
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., .[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
)
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
)
# --------------------------------------------+
# For individual genotypes
# --------------------------------------------+
FUN_genos_varcomps <- function(ni, pi, hi, r){
# Reorder, just to be sure
ni <- ni[names(pi)]
hi <- hi[names(pi)]
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
FUN_varcomps_genos <- function(ni, pi, hi, r){
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_freqs_varcomp(ni=N, pi=FREQ, hi=HO, r=sum(N)), by=LOCUS]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomp_genos(ni=N, pi=FREQ, hi=HO, r=sum(N)), by=LOCUS]
FUN_varcomps_genos <- function(ni, pi, hi, r){
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomp_genos(ni=N, pi=FREQ, hi=HO, r=sum(N)), by=LOCUS]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=sum(N)), by=LOCUS]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
)
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=sum(N)), by=LOCUS]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
)
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[LOCUS=='Contig6_85']
D <- left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[LOCUS=='Contig6_85']
FUN_varcomps_genos(ni=D$N, pi=D$FREQ, hi=D$HO, r=sum(D$N))
D
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS]
left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM] %>%
print
fstTab <- left_join(
dat[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
dat[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., dat[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
fstTab
fstTab
fstTab[, sum(NUMER)/sum(DENOM)]
D <- data_PoolFreqs
FUN_varcomps_freqs <- function(pi, ni, r){
# Mean weighted allele frequency
p.mean <- sum(ni * pi)/sum(ni)
# Mean squares variance components
msp <- (1/(r-1)) * sum(ni * (pi - p.mean)^2)
msg <- (1/sum(ni-1)) * sum(ni * pi * (1-pi))
# Sample size correction factor
nc <- (1/(r-1)) * ( sum(ni) - (sum(ni^2)/sum(ni)) )
# Output as data.table
data.table(NUMER=msp-msg, DENOM=msp+(nc-1)*msg)
}
FUN_varcomps_genos <- function(ni, pi, hi, r){
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
D
dat <- data_PoolFreqs %>% copy %>% setnames(., old='POOL', new='POP')
dat
dat[, FUN_varcomps_freqs(pi=FREQ, ni=INDS, r=length(unique(POP))), by=LOCUS]
# For frequencies
dat <- data_PoolFreqs %>% copy %>% setnames(., old='POOL', new='POP')
dat[, FUN_varcomps_freqs(pi=FREQ, ni=INDS, r=length(unique(POP))), by=LOCUS]
fstLoc <- dat %>%
.[, FUN_varcomps_freqs(pi=FREQ, ni=INDS, r=length(unique(POP))), by=LOCUS]
fstLoc
fstLocus <- dat %>%
.[, FUN_varcomps_freqs(pi=FREQ, ni=INDS, r=length(unique(POP))), by=LOCUS]
fstGlobal <- fstLocus[, sum(NUMER)/sum(DENOM)]
fstGlobal
# For genotypes
dat <- data_4pops
FUN_fst_genos <- function(D){
left_join(
D[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
D[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., D[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
}
fstLocus <- FUN_fst_genos(dat)
fstLocus
fstLocus
# Global FST
fstGlobal <- fstLocus[, sum(NUMER)/sum(DENOM)]
fstGlobal
# For genotype permutations
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
popPermTab
library(genomalicioius)
library(genomalicious)
FUN_varcomps_freqs <- function(pi, ni, r){
# Mean weighted allele frequency
p.mean <- sum(ni * pi)/sum(ni)
# Mean squares variance components
msp <- (1/(r-1)) * sum(ni * (pi - p.mean)^2)
msg <- (1/sum(ni-1)) * sum(ni * pi * (1-pi))
# Sample size correction factor
nc <- (1/(r-1)) * ( sum(ni) - (sum(ni^2)/sum(ni)) )
# Output as data.table
data.table(NUMER=msp-msg, DENOM=msp+(nc-1)*msg)
}
FUN_varcomps_genos <- function(ni, pi, hi, r){
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
FUN_fst_genos <- function(D){
left_join(
D[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
D[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., D[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
}
# For genotypes
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
# For genotype permutations
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
### FOR GENOTYPES
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
popPermTab
dat
permute <- TRUE
bootstrap <- FALSE
num.iters <- 100
FUN_varcomps_freqs <- function(pi, ni, r){
# Mean weighted allele frequency
p.mean <- sum(ni * pi)/sum(ni)
# Mean squares variance components
msp <- (1/(r-1)) * sum(ni * (pi - p.mean)^2)
msg <- (1/sum(ni-1)) * sum(ni * pi * (1-pi))
# Sample size correction factor
nc <- (1/(r-1)) * ( sum(ni) - (sum(ni^2)/sum(ni)) )
# Output as data.table
data.table(NUMER=msp-msg, DENOM=msp+(nc-1)*msg)
}
FUN_varcomps_genos <- function(ni, pi, hi, r){
# The mean sample size
n.mean <- sum(ni/r)
# The sample size scaling parameter
nc <- (r*n.mean - sum((ni^2)/(r*n.mean))) / (r-1)
# The average sample allele frequency
p.mean <- sum((ni*pi)/(r*n.mean))
# The variance in allele frequencies
s2 <- sum( (ni*(pi-p.mean)^2)/((r-1)*n.mean) )
# The average heterozygosity
h.mean <- sum( (ni*hi)/(r*n.mean) )
# The a, b, and c components
a <- (nc/n.mean) * (s2 - (1/(n.mean-1))*((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (0.25*h.mean)))
b <- (n.mean/(n.mean-1)) * ((p.mean*(1-p.mean)) - (s2*(r-1)/r) - (h.mean*((2*n.mean-1)/(4*n.mean))))
c <- 0.5 * h.mean
# Return as numerator and denominator
return(data.table(NUMER=a, DENOM=a+b+c))
}
FUN_fst_genos <- function(D){
left_join(
D[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
D[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')]
) %>%
left_join(
., D[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')]
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
}
### FOR GENOTYPES
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
smaple(popPermTab$POP, nrow(popPermTab), replace=FALSE)
sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
dat[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., )
dat[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab)
dat[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab) %>%
FUN_fst_genos(.)
dat[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab) %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
fstPermList <- list()
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab) %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
FUN_fst_genos <- function(D){
left_join(
D[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
D[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')],
by=c('POP','LOCUS')
) %>%
left_join(
., D[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')], by='SAMPLE'
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
}
### FOR GENOTYPES
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
# For genotype permutations
if(permute == TRUE){}
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab) %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
FUN_fst_genos <- function(D){
left_join(
D[, .(FREQ=sum(GT)/(length(GT)*2)), by=c('POP','LOCUS')],
D[, .(HO=sum(GT==1)/length(GT)), by=c('POP','LOCUS')],
by=c('POP','LOCUS')
) %>%
left_join(
., D[, .(N=length(unique(SAMPLE))), by=c('POP','LOCUS')], by=c('POP','LOCUS')
) %>%
.[, FUN_varcomps_genos(ni=N, pi=FREQ, hi=HO, r=length(unique(POP))), by=LOCUS] %>%
.[, FST:=NUMER/DENOM]
}
### FOR GENOTYPES
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
# For genotype permutations
if(permute == TRUE){}
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab) %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab, by='SAMPLE') %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
fstPermList
fstLocus
fstGlobal <- fstLocus[, sum(NUMER)/sum(DENOM)]
fstGlobal
### FOR GENOTYPES
dat <- data_4pops
fstLocus <- FUN_fst_genos(dat)
fst.global <- fstLocus[, sum(NUMER)/sum(DENOM)]
# For genotype permutations
if(permute == TRUE){
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab, by='SAMPLE') %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
perm.fst <- unlist(fstPermList)
perm.pval <- sum(perm.fst)>fstGlobal
}
perm.pval <- sum(perm.fst>fst.global)/num.iters
perm.fst <- unlist(fstPermList)
perm.pval <- sum(perm.fst>fst.global)/num.iters
perm.pval
### FOR GENOTYPES
dat <- data_4pops
fstAmong <- list()
fstAmong$locus <- FUN_fst_genos(dat)
fstAmong$global <- fstLocus[, sum(NUMER)/sum(DENOM)]
# For genotype permutations
if(permute == TRUE){
popPermTab <- dat[, c('POP','SAMPLE')] %>% unique
fstPermList <- list()
for(i in 1:num.iters){
popPermTab$POP <- sample(popPermTab$POP, nrow(popPermTab), replace=FALSE)
fstPermList[[i]] <- dat %>%
.[, c('SAMPLE','LOCUS','GT')] %>%
left_join(., popPermTab, by='SAMPLE') %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
perm.fst <- unlist(fstPermList)
perm.pval <- sum(perm.fst>fstAmong$global)/num.iters
}
loci.uniq <- dat$LOCUS %>% unique()
boot.results[[i]] <- dat %>%
.[LOCUS %in% sample(loci.uniq, size=length(loci.uniq), replace=TRUE)] %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
fstBoot <- list()
loci.uniq <- dat$LOCUS %>% unique()
boot.results <- list()
for(i in 1:num.iters){
boot.results[[i]] <- dat %>%
.[LOCUS %in% sample(loci.uniq, size=length(loci.uniq), replace=TRUE)] %>%
FUN_fst_genos(.) %>%
.[, sum(NUMER)/sum(DENOM)]
}
unlist(boot.results)
hist(unlist(boot.results))
