#' is \code{'character'}, then assumes alleles are separated
#' with a '/'. Doesn't have to be biallelic (see param \code{biallelic}).
#' If the class is \code{'integer'}, then assumes counts of
#' Ref alleles, in which case, it assumes data is biallelic.
#'
#' @param biallelic Logical: Is the data biallelic? Affects processing and
#' output (see also "Value" section).
#'
#' @return A vector of alleles counts. If \code{biallelic==TRUE}, returns
#' vector with names \code{'ref'} and \code{'alt'}. If \code{biallelic==FALSE},
#' returns a vector with names as alleles.
#'
#' @examples
#' # Genotypes as separated alleles, biallelic
#' allele_counts(c('1/1', '0/1', '0/1', '0/0', '0/0'))
#'
#' # Genotypes as separated alleles, not biallelic
#' allele_counts(c('1/1', '2/3', '1/3', '0/0', '2/2'), biallelic=FALSE)
#'
#' # Genotypes as counts of the Ref allele
#' allele_counts(c(2, 1, 1, 0, 2))
#'
#' @export
allele_counts <- function(dat, biallelic=TRUE){
# --------------------------------------------+
# Libraries and assertins
# --------------------------------------------+
if(class(dat)=='character'){
# Get the alleles
als <- unlist(strsplit(dat, split='/'))
# Get unique allelles
uniqAls <- unique(als)
# Check to see if number of unique alleles matches biallelic spec
if(length(uniqAls)==2 & sum(c('1', '0') %in% uniqAls)==1 & biallelic==FALSE){
warning('Argument biallelic==FALSE, but argument dat looks biallelic.')
}
}
if(class(dat)=='numeric' | class(dat)=='integer'){
# Make sure it's an integer
dat <- as.integer(dat)
# Set biallelic to TRUE
biallelic <- TRUE
}
# --------------------------------------------+
# Code
# --------------------------------------------+
# Sample size
n <- length(dat)*2
# If given a character vector:
if(class(dat)=='character'){
# If data is biallelic
if(biallelic==TRUE){
ref <- sum(genoscore_converter(dat))
alt <- n - ref
return(c(ref=ref, alt=alt))
# Else, if >2 alleles
} else{
tab <- table(als)
vec <- as.vector(tab)
names(vec) <- names(tab)
return(vec)
}
# If given counts of bialleles
} else if(class(dat)=='integer'){
ref <- sum(dat)
alt <- n - ref
return(c(ref=ref, alt=alt))
}
}
data(genomalicious_Pi)
data(genomalicious_pi)
data(genomalicious_PoolPi)
data(genomalicious_Info)
data(genomalicious_PoolInfo)
genomalicious_PoolPi
data(genomalicious_PoolPi)
genomalicious_PoolPi
data(genomalicious_FreqsLong)
dat <- genomalicious_FreqsLong
dat
freqMat <- DT2Mat_freqs(dat=dat, popCol='POP', locusCol='LOCUS', freqCol='FREQ', flip=FALSE)
freqMat
data(genomalicious_4pops)
datGt <- genomalicious_4pops
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
datGt$GT[missIdx] <- NA
data(genomalicious_4pops)
datGt <- genomalicious_4pops
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
datGt$GT[missIdx] <- NA
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 200000:200500)
datGt$GT[missIdx] <- NA
datGt$GT
data(genomalicious_4pops)
datGt <- genomalicious_4pops
datGt$GT
dat
datGt
data(genomalicious_4pops)
datGt <- genomalicious_4pops
datGt
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
missHeatmap(datGt)
missHeatmap(datGt, plotColours=c('black', 'plum2'))
missHeatmap(datGt, popCol='POP')
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 120000:120100
, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
missHeatmap(datGt, popCol='POP')
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 100000:100100
, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
head(datGt, 10)
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 100000:100100
, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
head(datGt, 10)
missHeatmap(datGt, popCol='POP')
data(genomalicious_4pops)
datGt <- genomalicious_4pops
# Add missing values
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 9000:9100
, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
head(datGt, 10)
missHeatmap(datGt, popCol='POP')
####   MISSING GENOTYPE DATA   ####
data(genomalicious_4pops)
datGt <- genomalicious_4pops
# Add missing values
missIdx <- c(sample(1:nrow(datGt), size=0.05*nrow(datGt), replace=FALSE)
, 100:500, 800:1200, 8000:8888, 9000:9800
, 140000:140500, 144500:144597)
datGt$GT[missIdx] <- NA
missHeatmap(datGt, popCol='POP')
unique(datGt$GT)
unique(datGt$LOCUS)
x <- split(datGt, by=datGt$LOCUS)
x <- split(datGt, datGt$LOCUS)
x <- split(datGt, datGt$LOCUS)[[1]]
x
?rpois
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
rpois(1, 10)
hist(100000, rpois(1, 10))
hist(rpois(100000000, 10))
hist(rpois(10000, 10))
hist(rpois(10000, 5))
hist(rpois(10000, 2))
x <- split(datGt, datGt$SAMPLE)[[1]]
x
datGt <- genomalicious_4pops
x <- split(datGt, datGt$SAMPLE)[[1]]
x
1205 * 0.05
hist(rpois(1000, 60))
hist(rpois(1000, 600))
?NegBinomial
hist(rnbinom(1000, 0.05))
hist(rnbinom(1000, size=1, 0.05))
hist(rnbinom(1000, size=1, prob=0.05))
hist(rnbinom(1000, size=10, prob=0.05))
hist(rnbinom(1000, size=8, prob=0.05))
hist(rnbinom(1000, size=2, prob=0.05))
rnbinom(1, size=2, prob=0.05)
sample(1:nrow(x), size=numMiss, replace=FALSE)
numMiss <- rnbinom(1, size=2, prob=0.05)
sample(1:nrow(x), size=numMiss, replace=FALSE)
numMiss
datGt$GT[idxMiss] <- NA
numMiss <- rnbinom(1, size=2, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
datGt$GT[idxMiss] <- NA
datGt
datGt$GT
datGt <- genomalicious_4pops
datGt <- do.call('rbind', lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=2, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
datGt
missHeatmap(datGt, popCol='POP')
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=8, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
return(x)
x$GT[idxMiss] <- NA
}))
head(datGt, 10)
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=8, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
head(datGt, 10)
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=2, prob=0.1)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
?rbinom
data(genomalicious_4pops)
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=5, prob=0.1)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=10, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=8, prob=0.05)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=10, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=10, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=8, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
# Add missing values
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHist(datGt, plotBy='samples',, look='classic')
missHist(datGt, plotBy='samples',, look='ggplot'
, popCol='POP' , plotColours='plum2')
missHist(datGt, plotBy='loci',, look='classic'
, popCol='POP' , plotColours='plum2')
x
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP=='Pop1'){ pr <- 0.05
} else if(x$POP=='Pop2'){ pr <- 0.01
} else{ pr <- 0.025}
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP=='Pop1'){ pr <- 0.05
} else if(x$POP=='Pop2'){ pr <- 0.01
} else{ pr <- 0.025}
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
warnings()
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.05
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.025}
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
datGt
missHist(datGt, plotBy='samples',, look='ggplot'
, popCol='POP' , plotColours='plum2')
#'
#' ####   PLOT MISSING BY LOCI   ####
missHist(datGt, plotBy='loci',, look='classic'
, popCol='POP' , plotColours='plum2')
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.025}
numMiss <- rnbinom(1, size=5, prob=0.025)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHist(datGt, plotBy='samples',, look='ggplot'
, popCol='POP' , plotColours='plum2')
#'
#' ####   PLOT MISSING BY LOCI   ####
missHist(datGt, plotBy='loci',, look='classic'
, popCol='POP' , plotColours='plum2')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.025}
numMiss <- rnbinom(1, size=5, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHist(datGt, plotBy='samples',, look='ggplot'
, popCol='POP' , plotColours='plum2')
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=1, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
?rbinom
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=100, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=1, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.01
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=5, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.2
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=8, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
missHist(datGt, plotBy='samples',, look='ggplot'
, popCol='POP' , plotColours='plum2')
missHist(datGt, plotBy='loci',, look='classic'
, popCol='POP' , plotColours='plum2')
datGt <- genomalicious_4pops
datGt <- do.call('rbind'
, lapply(split(datGt, datGt$SAMPLE), function(x){
if(x$POP[1]=='Pop1'){ pr <- 0.1
} else if(x$POP[1]=='Pop2'){ pr <- 0.2
} else{ pr <- 0.05}
numMiss <- rnbinom(1, size=8, prob=pr)
idxMiss <- sample(1:nrow(x), size=numMiss, replace=FALSE)
x$GT[idxMiss] <- NA
return(x)
}))
missHeatmap(datGt, popCol='POP')
25/3
cairo_pdf('FIG_missingHeatmap.pdf', width=10/2.54, height=12/2.54)
missHeatmap(datGt, popCol='POP')
dev.off()
cairo_pdf('FIG_missingHeatmap.pdf', width=10/2.54, height=10/2.54)
missHeatmap(datGt, popCol='POP')
dev.off()
cairo_pdf('FIG_missingSamples.pdf', width=10/2.54, height=10/2.54)
missHist(datGt, plotBy='samples',, look='ggplot', popCol='POP')
dev.off()
cairo_pdf('FIG_missingLoci.pdf', width=10/2.54, height=10/2.54)
missHist(datGt, plotBy='loci',, look='classic', popCol='POP')
dev.off()
missHist(datGt, plotBy='samples',, look='ggplot', popCol='POP', popColours='royalblue')
missHist(datGt, plotBy='samples',, look='ggplot', popCol='POP', popColour='royalblue')
missHist(datGt, plotBy='samples',, look='ggplot', popCol='POP', plotColour='royalblue')
cairo_pdf('FIG_missingHeatmap.pdf', width=10/2.54, height=10/2.54)
missHeatmap(datGt, popCol='POP')
dev.off()
cairo_pdf('FIG_missingSamples.pdf', width=10/2.54, height=10/2.54)
missHist(datGt, plotBy='samples',, look='ggplot', popCol='POP', plotColour='royalblue')
dev.off()
cairo_pdf('FIG_missingLoci.pdf', width=10/2.54, height=10/2.54)
missHist(datGt, plotBy='loci',, look='classic', popCol='POP', plotColour='royalblue')
dev.off()
missHeatmap(datGt, popCol='POP')
?png
png('FIG_missingHeatmap.pdf', width=10/2.54, height=10/2.54, units='inches')
png('FIG_missingHeatmap.pdf', width=10/2.54, height=10/2.54, units='in')
png('FIG_missingHeatmap.pdf', width=10/2.54, height=10/2.54, units='in', res=600)
missHeatmap(datGt, popCol='POP')
dev.off()
png('FIG_missingHeatmap.png', width=10/2.54, height=10/2.54, units='in', res=600)
missHeatmap(datGt, popCol='POP')
dev.off()
png('FIG_missingHeatmap.png', width=10/2.54, height=10/2.54, units='in', res=600)
missHeatmap(datGt, popCol='POP')
dev.off()
png('FIG_missingHeatmap.png', width=12/2.54, height=10/2.54, units='in', res=600)
missHeatmap(datGt, popCol='POP')
dev.off()
