# Base plot
ggMito <- (ggplot()
# Theme
+ theme(
axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.length.x=unit(2, 'mm'),
axis.title.x=element_blank(),
legend.position='none',
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank(),
text=element_text(family=font)
)
# Gene features
+ geom_rect(
data=genesDT,
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX, fill=NAME),
colour=gene_border
)
# The central genome line
+ geom_rect(
data=data.table(START=0, END=genome_len, Y.MIN=-0.1, Y.MAX=0.1),
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX),
)
# Colours
+ scale_colour_manual(values=gene_colour)
+ scale_fill_manual(values=gene_colour)
# Axis limits
+ xlim(0, plot_xmax)
+ ylim(-plot_ymax,plot_ymax)
)
# Text for genes features on positive and negative strands
if(nrow(genesDT[STRAND==1]) > 0){
ggMito <- (ggMito
+ geom_text(
data=genesDT[STRAND==1],
mapping=aes(x=X.MID, y=1.2, label=NAME, colour=NAME),
angle=45, hjust='left', size=gene_txt_size, family=font
)
)
}
if(nrow(genesDT[STRAND==-1]) > 0){
ggMito <- (ggMito
+ geom_text(
data=genesDT[STRAND==-1],
mapping=aes(x=X.MID, y=-1.2, label=NAME, colour=NAME),
angle=45, hjust='right', size=gene_txt_size, family=font
)
)
}
ggMito
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####   ENVIRONMENT AND CHECKS   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
require(data.table); require(tidyverse); require(ggrepel)
# Check position variables
if(length(extra_ypos)!=1){
stop('Argument extra_ypos must be length 1. See ?mitogenome_plot.')
}
if(length(plot_ymax)!=1){
stop('Argument plot_ymax must be length 1. See ?mitogenome_plot.')
}
# Internal function
FUN_gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# Subset just the required columns
mitoDT <- mitoDT %>%
as.data.table %>%
.[,c('START', 'END', 'TYPE','NAME', 'STRAND')]
# Get the plotted genes data
genesDT <- mitoDT[TYPE %in% gene_type] %>%
.[, Y.MAX:=if_else(STRAND==1, 1, 0)] %>%
.[, Y.MIN:=if_else(STRAND==1, 0, -1)] %>%
.[, X.MID:=(START+END)/2]
# Get the extra plotted items
extraDT <- mitoDT[TYPE %in% extra_type] %>%
.[, Y.MAX:=if_else(STRAND==1, 1, 0)] %>%
.[, Y.MIN:=if_else(STRAND==1, 0, -1)] %>%
.[, X.MID:=(START+END)/2]
# Set gene colours if not specified
if(is.null(gene_colour)){
uniq_genes <- genesDT$NAME %>% unique() %>% sort()
gene_colour <- FUN_gg_color_hue(length(uniq_genes))
names(gene_colour) <- uniq_genes
} else{
if(FALSE %in% c(genesDT$NAME %in% names(gene_colour))){
stop('Argument gene_colour has been manually specified, but all the genes
to be plot are not accessible in names(gene_colour). See ?mitogenome_plot.')
}
}
# Set genome length if not specified
if(is.null(genome_len)){
genome_len <- mitoDT$END %>% max()
}
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####    PLOT GENE FEATURES   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Base plot
ggMito <- (
ggplot()
# Theme
+ theme(
axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.length.x=unit(2, 'mm'),
axis.title.x=element_blank(),
legend.position='none',
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank(),
text=element_text(family=font)
)
# Gene features
+ geom_rect(
data=genesDT,
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX, fill=NAME),
colour=gene_border
)
# The central genome line
+ geom_rect(
data=data.table(START=0, END=genome_len, Y.MIN=-0.1, Y.MAX=0.1),
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX),
)
# Colours
+ scale_colour_manual(values=gene_colour)
+ scale_fill_manual(values=gene_colour)
# Axis limits
+ xlim(0, plot_xmax)
+ ylim(-plot_ymax,plot_ymax)
)
# Text for genes features on positive and negative strands
if(nrow(genesDT[STRAND==1]) > 0){
ggMito <- (
ggMito
+ geom_text(
data=genesDT[STRAND==1],
mapping=aes(x=X.MID, y=1.2, label=NAME, colour=NAME),
angle=45, hjust='left', size=gene_txt_size, family=font
)
)
}
if(nrow(genesDT[STRAND==-1]) > 0){
ggMito <- (
ggMito
+ geom_text(
data=genesDT[STRAND==-1],
mapping=aes(x=X.MID, y=-1.2, label=NAME, colour=NAME),
angle=45, hjust='right', size=gene_txt_size, family=font
)
)
}
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####   PLOT EXTRA FEATURES   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if(nrow(extraDT)>0){
if(nrow(extraDT[STRAND==1]) > 0){
ggMito <- (
ggMito
+ geom_rect(
data=extraDT[STRAND==1],
mapping=aes(xmin=START, xmax=END, ymin=extra_ypos, ymax=extra_ypos+0.2)
)
+ geom_rect(
data=extraDT[STRAND==-1],
mapping=aes(xmin=START, xmax=END, ymin=-extra_ypos, ymax=-extra_ypos-0.2)
)
)
}
if(nrow(extraDT[STRAND==-1] > 0)){
ggMito <- (
ggMito
+ geom_text_repel(
data=extraDT[STRAND==1],
mapping=aes(x=START, y=extra_ypos+0.2, label=NAME),
angle=45, min.segment.length = unit(0, 'lines'),
ylim=c(extra_ypos+0.5,plot_ymax), nudge_y=extra_ypos+0.5,
size=extra_txt_size, family=font
)
+ geom_text_repel(
data=extraDT[STRAND==-1],
mapping=aes(x=START, y=-extra_ypos-0.2, label=NAME),
angle=45, min.segment.length = unit(0, 'lines'),
ylim=c(-plot_ymax,-extra_ypos-0.5), nudge_y=-extra_ypos-0.5,
size=extra_txt_size, family=font
)
)
}
}
# >>>>>>>>>>>>>>>>>>
####   OUTPUT   ####
# >>>>>>>>>>>>>>>>>>
return(ggMito)
ggMito
ggMito
#' Plot a mitogenome
#'
#' Uses base positions information to make a linear plot of genetic features.
#' Optimised to illustrate mitogenomes, but could be used for other genomic
#' regions (not rigorously tested).
#'
#' @param mitoDT Data.table: mitogenome information. Requires the columns: \cr
#' \enumerate{
#'    \item $NAME = Character, the name of the genetic feature.
#'    \item $TYPE = Character, the type of genetic feature.
#'    \item $STRAND = Integer, the starnd, either 1 or -1.
#'    \item $START = Integer, the starting base position.
#'    \item $END = Integer, the ending base position.
#' }
#'
#' @param genome_len Integer: the genome length. Default = NULL. If unspecified,
#' will be assigned the length of the last genetic feature in \code{mitoDT}.
#'
#' @param gene_colour Character: a vector of colours to plot genes. Each item
#' is a colour, with the gene accessible through \code{names(gene_colour)}.
#' See Details for parameterisation.
#'
#' @param gene_type Character: a vector of values present in \code{mitoDT$TYPE}
#' that will be plotted as large coloured bars. For plotting purposes,
#' "gene features". Default = \code{c('gene', 'rRNA')}.
#' See Details for parameterisation.
#'
#' @param extra_type Character: a vector of values present in \code{mitoDT$TYPE}
#' that will be plotted as small grey bars. For plotting purposes, "extra features".
#' Default = \code{c('tRNA', 'D-loop')}. See Details for parameterisation.
#'
#' @param plot_xmax Numeric: a single value, the maximum x-axis limit.
#' Default is the genome length, as per \code{genome_len}.
#'
#' @param extra_ypos Numeric: a single value, the starting y-axis position for
#' extra features. See Details for parameterisation.
#'
#' @param plot_ymax Numeric: a single value, the maximum y-axis limit.
#' See Details for parameterisation.
#'
#' @param gene_txt_size Integer: a single value, the size for gene feature labels.
#' Default is 4.
#'
#' @param extra_txt_size Integer: a single value, the size for extra feature labels.
#' Default is 4.
#'
#' @param font Character: a single value, the font family to use.
#' Default is \code{'Arial'}.
#'
#' @param gene_border Character: a single value, the colour for borders around
#' gene features. Default is NA, no border.
#'
#' @details There are two major features plotted, "gene features" and
#' "extra features". These names are just for convention: gene features are
#' plotted as large coloured bars in center of the plot, whereas extra features are
#' plotted as small grey bars above/below the gene features.
#' Anything could be plotted as a gene or extra feature, and these are
#' specified through \code{gene_type} and \code{extra_type}.
#'
#' The value of \code{mitoDT$STRAND} dictates the position of the coloured bars.
#' A value of 1 places "genes" on the top of the genomic strand, whereas a value
#' of -1 places "genes" below the genomic strand.
#'
#' The colour of the gene features is specified through \code{gene_colour} as
#' a named vector. If there are two genes, 'COX1' and 'COX2', specification of
#' their colours can be done like so: \code{c(COX1='pink', COX2='blue')}.
#' If colours are not specified, one colour is automatically assigned to each
#' unique "gene".
#'
#' The value of \code{extra_ypos} specifies that distance of the extra features
#' from the gene features. Set larger if things are looking squashed.
#' Additionally, \code{plot_ymax} sets the maximal plotting area, so set this
#' value larger if things are not fitting well.
#'
#' @return Returns a gg object.
#'
#' @examples
#' library(genomalicious)
#'
#' # Create a link to raw external datasets in genomalicious
#' genomaliciousExtData <- paste0(find.package('genomalicious'), '/extdata')
#'
#' # Read in a GENBANK file of the Bathygobius cocosensis mitogenome
#' gbk.read <- mitoGbk2DT(paste(genomaliciousExtData, 'data_Bcocosensis.gbk', sep='/'))
#' head(gbk.read)
#'
#' # Subset out the "CDS" types and plot genes, rRNA, tRNA, and D-loop.
#' # Rename rRNAs for nicer plotting.
#' gbk.read[TYPE!='CDS'] %>%
#' .[NAME=='12S ribosomal RNA', NAME:='12S rRNA'] %>%
#' .[NAME=='16S ribosomal RNA', NAME:='16S rRNA'] %>%
#' mitogenome_plot(mitoDT=., genome_len=16692, extra_txt_size=3)
#'
#' # Plot just the COX genes and the D-loop as "gene features" with
#' # custom colours and a border.
#' gene.col.vec <- c(
#' 'COX1'='royalblue',
#' 'COX2'='firebrick3',
#' 'COX3'='mediumpurple2',
#' 'CYTB'='plum2',
#' 'D-loop'='grey80')
#'
#' gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
#'   mitogenome_plot(
#'     mitoDT=., genome_len=16692,
#'     gene_type=c('gene', 'D-loop'),
#'     extra_type=NULL)
#'
#' @export
mitogenome_plot <- function(
mitoDT, genome_len=NULL, gene_colour=NULL,
gene_type=c('gene', 'rRNA'), extra_type=c('tRNA', 'D-loop'),
plot_xmax=genome_len, extra_ypos=3, plot_ymax=5,
gene_txt_size=4, extra_txt_size=4, font='Arial', gene_border=NA
){
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####   ENVIRONMENT AND CHECKS   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
require(data.table); require(tidyverse); require(ggrepel)
# Check position variables
if(length(extra_ypos)!=1){
stop('Argument extra_ypos must be length 1. See ?mitogenome_plot.')
}
if(length(plot_ymax)!=1){
stop('Argument plot_ymax must be length 1. See ?mitogenome_plot.')
}
# Internal function
FUN_gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# Subset just the required columns
mitoDT <- mitoDT %>%
as.data.table %>%
.[,c('START', 'END', 'TYPE','NAME', 'STRAND')]
# Get the plotted genes data
genesDT <- mitoDT[TYPE %in% gene_type] %>%
.[, Y.MAX:=if_else(STRAND==1, 1, 0)] %>%
.[, Y.MIN:=if_else(STRAND==1, 0, -1)] %>%
.[, X.MID:=(START+END)/2]
# Get the extra plotted items
extraDT <- mitoDT[TYPE %in% extra_type] %>%
.[, Y.MAX:=if_else(STRAND==1, 1, 0)] %>%
.[, Y.MIN:=if_else(STRAND==1, 0, -1)] %>%
.[, X.MID:=(START+END)/2]
# Set gene colours if not specified
if(is.null(gene_colour)){
uniq_genes <- genesDT$NAME %>% unique() %>% sort()
gene_colour <- FUN_gg_color_hue(length(uniq_genes))
names(gene_colour) <- uniq_genes
} else{
if(FALSE %in% c(genesDT$NAME %in% names(gene_colour))){
stop('Argument gene_colour has been manually specified, but all the genes
to be plot are not accessible in names(gene_colour). See ?mitogenome_plot.')
}
}
# Set genome length if not specified
if(is.null(genome_len)){
genome_len <- mitoDT$END %>% max()
}
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####    PLOT GENE FEATURES   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Base plot
ggMito <- (
ggplot()
# Theme
+ theme(
axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.length.x=unit(2, 'mm'),
axis.title.x=element_blank(),
legend.position='none',
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank(),
text=element_text(family=font)
)
# Gene features
+ geom_rect(
data=genesDT,
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX, fill=NAME),
colour=gene_border
)
# The central genome line
+ geom_rect(
data=data.table(START=0, END=genome_len, Y.MIN=-0.1, Y.MAX=0.1),
mapping=aes(xmin=START, xmax=END, ymin=Y.MIN, ymax=Y.MAX),
)
# Colours
+ scale_colour_manual(values=gene_colour)
+ scale_fill_manual(values=gene_colour)
# Axis limits
+ xlim(0, plot_xmax)
+ ylim(-plot_ymax,plot_ymax)
)
# Text for genes features on positive and negative strands
if(nrow(genesDT[STRAND==1]) > 0){
ggMito <- (
ggMito
+ geom_text(
data=genesDT[STRAND==1],
mapping=aes(x=X.MID, y=1.2, label=NAME, colour=NAME),
angle=45, hjust='left', size=gene_txt_size, family=font
)
)
}
if(nrow(genesDT[STRAND==-1]) > 0){
ggMito <- (
ggMito
+ geom_text(
data=genesDT[STRAND==-1],
mapping=aes(x=X.MID, y=-1.2, label=NAME, colour=NAME),
angle=45, hjust='right', size=gene_txt_size, family=font
)
)
}
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####   PLOT EXTRA FEATURES   ####
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if(nrow(extraDT)>0){
if(nrow(extraDT[STRAND==1]) > 0){
ggMito <- (
ggMito
+ geom_rect(
data=extraDT[STRAND==1],
mapping=aes(xmin=START, xmax=END, ymin=extra_ypos, ymax=extra_ypos+0.2)
)
+ geom_rect(
data=extraDT[STRAND==-1],
mapping=aes(xmin=START, xmax=END, ymin=-extra_ypos, ymax=-extra_ypos-0.2)
)
)
}
if(nrow(extraDT[STRAND==-1] > 0)){
ggMito <- (
ggMito
+ geom_text_repel(
data=extraDT[STRAND==1],
mapping=aes(x=START, y=extra_ypos+0.2, label=NAME),
angle=45, min.segment.length = unit(0, 'lines'),
ylim=c(extra_ypos+0.5,plot_ymax), nudge_y=extra_ypos+0.5,
size=extra_txt_size, family=font
)
+ geom_text_repel(
data=extraDT[STRAND==-1],
mapping=aes(x=START, y=-extra_ypos-0.2, label=NAME),
angle=45, min.segment.length = unit(0, 'lines'),
ylim=c(-plot_ymax,-extra_ypos-0.5), nudge_y=-extra_ypos-0.5,
size=extra_txt_size, family=font
)
)
}
}
# >>>>>>>>>>>>>>>>>>
####   OUTPUT   ####
# >>>>>>>>>>>>>>>>>>
return(ggMito)
}
gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
mitogenome_plot(
mitoDT=., genome_len=16692,
gene_type=c('gene', 'D-loop'),
extra_type=NULL)
gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
mitogenome_plot(
mitoDT=., genome_len=16692,
gene_type=c('gene', 'D-loop'), gene_colour=gene.col.vec,
extra_type=NULL, gene_border=TRUE)
gene.col.vec <- c(
'COX1'='royalblue',
'COX2'='firebrick3',
'COX3'='mediumpurple2',
'CYTB'='plum2',
'D-loop'='grey69')
gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
mitogenome_plot(
mitoDT=., genome_len=16692,
gene_type=c('gene', 'D-loop'), gene_colour=gene.col.vec,
extra_type=NULL, gene_border=TRUE)
gene.col.vec <- c(
'COX1'='royalblue',
'COX2'='firebrick3',
'COX3'='mediumpurple2',
'CYTB'='plum3',
'D-loop'='grey69')
gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
mitogenome_plot(
mitoDT=., genome_len=16692,
gene_type=c('gene', 'D-loop'), gene_colour=gene.col.vec,
extra_type=NULL, gene_border=TRUE)
gene.col.vec <- c(
'COX1'='royalblue',
'COX2'='firebrick3',
'COX3'='mediumpurple2',
'CYTB'='plum3',
'D-loop'='grey40')
gbk.read[NAME %in% c('COX1','COX2','COX3','CYTB','D-loop')] %>%
mitogenome_plot(
mitoDT=., genome_len=16692,
gene_type=c('gene', 'D-loop'), gene_colour=gene.col.vec,
extra_type=NULL, gene_border=TRUE)
# Make documents
roxygenise(clean=TRUE) # Sometimes this throws an error?
# Developer libraries
libs <- c('devtools', 'roxygen2', 'testthat', 'knitr', 'data.table', 'tidyverse')
for(L in libs){require(L, character.only=TRUE)}
# Make documents
roxygenise(clean=TRUE) # Sometimes this throws an error?
library(genomalicious)
?mitogenome_plot
library(genomalicious)
