POP.PRED=DA.test$class
)
# CV statistics
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
predPairsWide
predPairsLong
DA.test <- predict(DA.train, newdata = X.test[1,])
i=6
PCA.train <- pca_genos(dat[SAMPLE!=samps[i],], scaling=scaling, popCol='POP')
DA.train <- lda(
as.data.frame(PCA.train$x[, 1:pcPreds]),
PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.i <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.i) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.i$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
predTab <- foreach(i=1:length(samps)) %dopar%{
require(genomalicious)
require(MASS)
PCA.train <- pca_genos(dat[SAMPLE!=samps[i],], scaling=scaling, popCol='POP')
DA.train <- lda(
as.data.frame(PCA.train$x[, 1:pcPreds]),
PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.i <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.i) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.i$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
} %>%
do.call('rbind',.)
predTab
# CV statistics
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
numCores=2
my.cluster <- makeCluster(numCores)
registerDoParallel(my.cluster)
predTab <- foreach(i=1:length(samps)) %dopar%{
require(genomalicious)
require(MASS)
PCA.train <- pca_genos(dat[SAMPLE!=samps[i],], scaling=scaling, popCol='POP')
DA.train <- lda(
as.data.frame(PCA.train$x[, 1:pcPreds]),
PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.i <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.i) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.i$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
} %>%
do.call('rbind',.)
# CV statistics
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
samps <- dat$SAMPLE %>% unique
pops.uniq <- dat$POP %>% unique
i=1
my.cluster <- makeCluster(numCores)
registerDoParallel(my.cluster)
predTab <- foreach(i=1:length(samps)) %dopar%{
require(genomalicious)
require(MASS)
PCA.train <- pca_genos(dat[SAMPLE!=samps[i],], scaling=scaling, popCol='POP')
DA.train <- lda(
as.data.frame(PCA.train$x[, 1:pcPreds]),
PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.test <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.test) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.test$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
} %>%
do.call('rbind',.)
DA.train <- lda(
x=as.data.frame(PCA.train$x[, 1:pcPreds]),
grouping=PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.test <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.test) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.test$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
dat.test$POP[1]
samps[i]
DA.test$class
predTab <- foreach(i=1:length(samps)) %dopar%{
require(genomalicious)
require(MASS)
PCA.train <- pca_genos(dat[SAMPLE!=samps[i],], scaling=scaling, popCol='POP')
DA.train <- lda(
x=as.data.frame(PCA.train$x[, 1:pcPreds]),
grouping=PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30)
dat.test <- dat[SAMPLE==samps[i],]
X.test <- DT2Mat_genos(dat.test) %*% PCA.train$rotation %>%
.[, 1:pcPreds] %>%
matrix(., ncol=pcPreds, nrow=1) %>%
as.data.frame() %>%
setnames(., new=paste0('PC', 1:pcPreds))
DA.test <- predict(DA.train, newdata = X.test[1,])
data.table(
POP=dat.test$POP[1],
SAMPLE=samps[i],
POP.PRED=DA.test$class
)
} %>%
do.call('rbind',.)
predTab
predTab[POP!=POP.PRED]
pairs(PCA$x[, 1:3], col=as.factor(PCA$pops))
# Make the 4 pop genotype dataset
fsc_genos <- fread('inst/extdata/fsc2_radseq_sim_1_1.gen', skip=1)
fsc_head <- colnames(fread('inst/extdata/fsc2_radseq_sim_1_1.gen', nrow=0))
fsc_tab <- fsc_genos[, 1:(ncol(fsc_genos)-1)] %>%
setnames(., new=fsc_head) %>%
setnames(
.,
old=c('Chrom','Pos','Anc_all','Der_all'),
new=c('CHROM','POS','REF','ALT')
) %>%
melt(
.,
id.vars=c('CHROM','POS','REF','ALT'),
variable.name='SAMPLE',
value.name='GT'
) %>%
.[, SAMPLE:=as.character(SAMPLE)] %>%
.[, SAMPLE:=sub('A_', 'Ind', SAMPLE)] %>%
.[, POP:=sub('Ind', 'Pop', sub('\\_.*', '', SAMPLE))] %>%
.[, CHROM:=paste0('Contig', CHROM)] %>%
.[, LOCUS:=paste(CHROM, POS, sep='_')] %>%
.[, c('CHROM','POS','LOCUS','POP','SAMPLE','GT')] %>%
print
fsc_tab[, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:10]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:100]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:200]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:200]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
save(data_4pops, file='data/data_4pops.RData')
# Make a VCF from 4 pop genotypes
sub4pops <- data_4pops[
LOCUS %in% sample(x=unique(data_4pops$LOCUS), size=8, replace=FALSE)
& SAMPLE %in% data_4pops[, unique(SAMPLE)[1:8], by=POP]$V1, ]
sub4pops[, DP:=rnbinom(nrow(sub4pops), mu=30, size=2)]
hist(sub4pops$DP)
sub4pops <-
apply(sub4pops, 1, function(xx){
dp <- as.integer(xx['DP'])
if(xx['GT']=='0/0'){
ro <- dp; ao <- 0
} else if(xx['GT']=='0/1'){
ro <- sum(rbinom(dp/2, size=1, prob=1))
ao <- dp - ro
} else{
ro <- 0; ao <- dp
}
return(data.table(RO=ro, AO=ao))
}) %>%
do.call('rbind', .) %>%
cbind(sub4pops, .) %>%
as.data.table()
vcf4pops <- do.call('rbind', lapply(unique(sub4pops$LOCUS), function(locus){
X <- sub4pops[LOCUS==locus]
alleles <- sample(size=2, x=c('G', 'A', 'T', 'C'), replace=FALSE)
col_names <- c('CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'FORMAT', X$SAMPLE)
vcfRow <- matrix('.', nrow=1, ncol=9+nrow(X), dimnames=list(NULL, col_names))
vcfRow[,'CHROM'] <- X$CHROM[1]
vcfRow[1,'POS'] <- X$POS[1]
vcfRow[1,'REF'] <- alleles[1]
vcfRow[1,'ALT'] <- alleles[2]
vcfRow[1,'INFO'] <- paste0('DP=', sum(X$DP))
vcfRow[1,'QUAL'] <- 30
vcfRow[1,'FORMAT'] <- 'GT:DP:RO:AO'
for(samp in unique(X$SAMPLE)){
xsamp <- unlist(X[SAMPLE==samp, c('GT', 'DP', 'RO', 'AO')])
vcfRow[, samp] <- paste(xsamp, collapse=':')
}
vcfRow <- as.data.table(vcfRow)
setnames(vcfRow, 'CHROM', '#CHROM')
return(vcfRow)
}))
fwrite(vcf4pops, 'inst/extdata/data_indseq.vcf', sep='\t', quote=FALSE)
dat <- data_4pops
sampCol='SAMPLE'
locusCol='LOCUS'
genoCol='GT'
popCol='POP'
numCores=1
trainProp <- 0.7
scaling='covar'
pcPreds <- 3
colnames(dat)[match(c(sampCol, locusCol, popCol, genoCol),colnames(dat))] <- c(
'SAMPLE','LOCUS','POP','GT'
)
FUN_snp_da_contrib <- function(x){
temp <- sum(x*x)
if(temp < 1e-12) return(rep(0, length(x)))
return(x*x / temp)
}
k <- length(unique(dat$POP))
# Training-testing partitioning
samps.train <- dat %>%
.[, c('POP','SAMPLE')] %>%
unique %>%
.[, sample(SAMPLE, round(length(unique(SAMPLE)))*trainProp), by=POP] %>%
.[['V1']]
samps.test <- dat %>%
.[, c('POP','SAMPLE')] %>%
unique %>%
.[!SAMPLE%in%samps.train] %>%
.[['SAMPLE']]
PCA.train <- dat %>%
.[SAMPLE %in% samps.train] %>%
pca_genos(., scaling=scaling, popCol='POP')
DA.train <- lda(
x=PCA.train$x[, 1:pcPreds],
grouping=PCA.train$pops,
prior=rep(1,k)/k,
tol=1e-30
)
X.test <- dat[SAMPLE %in% samps.test] %>%
dcast(., POP+SAMPLE~LOCUS, value.var='GT')
PCA.test <- as.matrix(X.test[, rownames(PCA.train$rotation), with=FALSE]) %*%
PCA.train$rotation
DA.test <- predict(DA.train, newdata=PCA.test[, 1:pcPreds])
predTab <- data.table(
POP=X.test$POP,
SAMPLE=X.test$SAMPLE,
POP.PRED=DA.test$class
)
# CV statistics
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
pairs(PCA$x[, 1:3], col=as.factor(PCA$pops))
# CV statistics
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
predPairsWide
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:100]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:150]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:200]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
fsc_genos <- fread('inst/extdata/fsc2_radseq_sim_1_1.gen', skip=1)
fsc_head <- colnames(fread('inst/extdata/fsc2_radseq_sim_1_1.gen', nrow=0))
fsc_tab <- fsc_genos[, 1:(ncol(fsc_genos)-1)] %>%
setnames(., new=fsc_head) %>%
setnames(
.,
old=c('Chrom','Pos','Anc_all','Der_all'),
new=c('CHROM','POS','REF','ALT')
) %>%
melt(
.,
id.vars=c('CHROM','POS','REF','ALT'),
variable.name='SAMPLE',
value.name='GT'
) %>%
.[, SAMPLE:=as.character(SAMPLE)] %>%
.[, SAMPLE:=sub('A_', 'Ind', SAMPLE)] %>%
.[, POP:=sub('Ind', 'Pop', sub('\\_.*', '', SAMPLE))] %>%
.[, CHROM:=paste0('Contig', CHROM)] %>%
.[, LOCUS:=paste(CHROM, POS, sep='_')] %>%
.[, c('CHROM','POS','LOCUS','POP','SAMPLE','GT')] %>%
print
fsc_tab[, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
keep.loci <- fsc_tab[LOCUS %in% filter_maf(fsc_tab, type='genos', maf=0.05)]$LOCUS %>%
unique() %>% .[1:200]
fsc_tab[LOCUS %in% keep.loci, length(unique(LOCUS)), by=CHROM]$V1 %>%  table
fsc_tab[GT=='1/0', GT:='0/1']
data_4pops <- fsc_tab[LOCUS %in% keep.loci]
data_4pops %>%  pca_genos(., popCol='POP') %>%  pca_plot
save(data_4pops, file='data/data_4pops.RData')
# Make a VCF from 4 pop genotypes
sub4pops <- data_4pops[
LOCUS %in% sample(x=unique(data_4pops$LOCUS), size=8, replace=FALSE)
& SAMPLE %in% data_4pops[, unique(SAMPLE)[1:8], by=POP]$V1, ]
sub4pops[, DP:=rnbinom(nrow(sub4pops), mu=30, size=2)]
hist(sub4pops$DP)
sub4pops <-
apply(sub4pops, 1, function(xx){
dp <- as.integer(xx['DP'])
if(xx['GT']=='0/0'){
ro <- dp; ao <- 0
} else if(xx['GT']=='0/1'){
ro <- sum(rbinom(dp/2, size=1, prob=1))
ao <- dp - ro
} else{
ro <- 0; ao <- dp
}
return(data.table(RO=ro, AO=ao))
}) %>%
do.call('rbind', .) %>%
cbind(sub4pops, .) %>%
as.data.table()
vcf4pops <- do.call('rbind', lapply(unique(sub4pops$LOCUS), function(locus){
X <- sub4pops[LOCUS==locus]
alleles <- sample(size=2, x=c('G', 'A', 'T', 'C'), replace=FALSE)
col_names <- c('CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO', 'FORMAT', X$SAMPLE)
vcfRow <- matrix('.', nrow=1, ncol=9+nrow(X), dimnames=list(NULL, col_names))
vcfRow[,'CHROM'] <- X$CHROM[1]
vcfRow[1,'POS'] <- X$POS[1]
vcfRow[1,'REF'] <- alleles[1]
vcfRow[1,'ALT'] <- alleles[2]
vcfRow[1,'INFO'] <- paste0('DP=', sum(X$DP))
vcfRow[1,'QUAL'] <- 30
vcfRow[1,'FORMAT'] <- 'GT:DP:RO:AO'
for(samp in unique(X$SAMPLE)){
xsamp <- unlist(X[SAMPLE==samp, c('GT', 'DP', 'RO', 'AO')])
vcfRow[, samp] <- paste(xsamp, collapse=':')
}
vcfRow <- as.data.table(vcfRow)
setnames(vcfRow, 'CHROM', '#CHROM')
return(vcfRow)
}))
fwrite(vcf4pops, 'inst/extdata/data_indseq.vcf', sep='\t', quote=FALSE)
sampCol='SAMPLE'
locusCol='LOCUS'
genoCol='GT'
popCol='POP'
numCores=1
trainProp <- 0.7
scaling='covar'
pcPreds <- 3
colnames(dat)[match(c(sampCol, locusCol, popCol, genoCol),colnames(dat))] <- c(
'SAMPLE','LOCUS','POP','GT'
)
FUN_snp_da_contrib <- function(x){
temp <- sum(x*x)
if(temp < 1e-12) return(rep(0, length(x)))
return(x*x / temp)
}
k <- length(unique(dat$POP))
# CV statistics
pops.uniq <- dat$POP %>% unique
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
pairs(PCA$x[, 1:3], col=as.factor(PCA$pops))
pairs(PCA.test$x[, 1:3], col=as.factor(PCA$pops))
pairs(PCA.test$x[, 1:3], col=as.factor(PCA.test$pops))
PCA.test
PCA.test
PCA.test$x
PCA.test
pairs(PCA.train$x[, 1:3], col=as.factor(PCA.train$pops))
# CV statistics
pops.uniq <- dat$POP %>% unique
predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
popComps <- CJ(POP=pops.uniq, POP.PRED=pops.uniq)
predPairsLong <- lapply(1:nrow(popComps), function(i){
pop.obs <- popComps$POP[i]
pop.pred <- popComps$POP.PRED[i]
assign <- nrow(predTab[POP==pop.obs & POP.PRED==pop.pred])/nrow(predTab[POP==pop.obs])
data.table(POP=pop.obs, POP.PRED=pop.pred, ASSIGN=assign)
}) %>%
do.call('rbind', .)
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
pairs(PCA.train$x[, 1:3], col=as.factor(PCA.train$pops))
predPairsWide
predPairsWide <- predPairsLong %>%
dcast(., POP~POP.PRED, value.var='ASSIGN')
predPairsWide
global
global <- predTab[, sum(POP==POP.PRED)/length(SAMPLE)]
list(
global=global, pairs.long=predPairsLong, pairs.wide=predPairsWide
) %>%
return()
?lda
require(MASS)
c(trainProp<0,train.prop>1)
c(trainProp<0,trainProp>1)
stop('Argument `trainProp` must be a proportion. See ?dapc_fit.')
# Check that the training proportion is a proportion
if(sum(c(trainProp<0,trainProp>1))>0){
stop('Argument `trainProp` must be a proportion. See ?dapc_fit.')
}
