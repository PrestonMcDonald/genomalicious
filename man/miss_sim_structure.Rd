% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/miss_sim_structure.R
\name{miss_sim_structure}
\alias{miss_sim_structure}
\title{Simulate missing data with a specified strcuture}
\usage{
miss_sim_structure(
  dat_clean,
  mat_patchy,
  sampCol = "SAMPLE",
  locusCol = "LOCUS",
  genoCol = "GT"
)
}
\arguments{
\item{dat_clean}{Data table: Must be in long format and contains
no missing data (i.e. it is "clean"). Genotypes can be coded as
'/' separated characters or a integers. Must contain the following
columns:
\enumerate{
   \item The sampled individual ID (see param \code{sampCol}).
   \item The locus ID (see param \code{locusCol}).
   \item The genotype (see param \code{genoCol}).
}}

\item{mat_patchy}{Matrix: Samples in rows, loci in columns.
This is meant to simulate a genotype matrix with missing data
(i.e. it is "patchy"), but the the actual contents of the matrix
can be anything, as long as missing values are coded by \code{NA}.}

\item{sampCol}{Character: The column name with the sampled individual information.
Default is \code{'SAMPLE'}.}

\item{locusCol}{Character: The column name with the locus information.
Default is \code{'LOCUS'}.}

\item{genoCol}{Character: The column name with the genotype information.
Default is \code{'GT'}.}
}
\description{
Takes a long format data table of genotypes that
has no missing data (clean) and simulates a missing data
analogous to a pathcy matrix used as a guide.
}
\details{
The number of samples and loci in the guide matrix, \code{mat_patchy}
does not have to be equal \code{dat_clean}. In the simulations, the rows and
columns of \code{mat_patchy} are randomly sampled (with replacement) to create
a bootstrap simulated  missing data structure of the same dimensions as the
observed clean data. This simulated missing data structure is then used to
modify the observed clean data. \cr
\cr
NOTE: This method is blind to population, so will simulate
missing data across individuals. Therefore, if missing data exhibits
population structuring, it would be necessary to subset the clean dataset
by population and run specific simulations per population, then combine
all the simulated subsets.
}
\examples{
library(data.table)
data(genomalicious_PatchyGTs)
data(genomalicious_4pops)

# Take a look at the patchy dataset
genomalicious_PatchyGTs

# Simulate missing data structure
patchy4pops <- miss_sim_structure(
    dat_clean=genomalicious_4pops
    , mat_patchy=genomalicious_PatchyGTs
    , sampCol='SAMPLE'
    , locusCol='LOCUS'
    , genoCol='GT'
)

# Take a look at the output.
# Histograms are ordered with samples in the first
# row and loci in the second row. The first column
# is the observed clean data, the second column
# is the simulated missing data, and the thir column
# is the missing data in the patchy guide matrix.
par(mfrow=c(2,3))
hist(genomalicious_4pops[, sum(GT=='./.')/length(GT), by=SAMPLE]$V1
    , 100, xlim=c(0,1), main='Obs clean: Samples', xlab='\% missing')

hist(patchy4pops[, sum(GT=='./.')/length(GT), by=SAMPLE]$V1
    , 100, xlim=c(0,1), main='Sim patchy: Samples', xlab='\% missing')

hist(
    unlist(
        apply(genomalicious_PatchyGTs
           , 1
           , function(i){sum(is.na(i))/length(i)}))
    , 100, xlim=c(0,1), main='Guide patchy: Samples', xlab='\% missing')

hist(genomalicious_4pops[, sum(GT=='./.')/length(GT), by=LOCUS]$V1
    , 100, xlim=c(0,1), main='Obs clean: Loci', xlab='\% missing')

hist(patchy4pops[, sum(GT=='./.')/length(GT), by=LOCUS]$V1
    , 100, xlim=c(0,1), main='Sim patchy: Loci', xlab='\% missing')

hist(
    unlist(
        apply(genomalicious_PatchyGTs
           , 2
           , function(i){sum(is.na(i))/length(i)}))
    , 100, xlim=c(0,1), main='Guide patchy: Loci', xlab='\% missing')
par(mfrow=c(1,1))

}
