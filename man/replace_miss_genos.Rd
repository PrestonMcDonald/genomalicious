% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/replace_miss_genos.R
\name{replace_miss_genos}
\alias{replace_miss_genos}
\title{Replace missing genotypes}
\usage{
replace_miss_genos(
  dat,
  sampCol = "SAMPLE",
  locusCol = "LOCUS",
  genoCol = "GT",
  popCol = NULL,
  methodReplace = "mode"
)
}
\arguments{
\item{dat}{Data table: A long data table, e.g. like that imported from
\code{vcf2DT}. Genotypes can be coded as '/' separated characters
(e.g. '0/0', '0/1', '1/1'), or integers as Alt allele counts (e.g. 0, 1, 2).
Must contain the following columns,
\enumerate{
  \item The sampled individuals (see param \code{sampCol}).
  \item The locus ID (see param \code{locusCol}).
  \item The genotype column (see param \code{genoCol}).
}}

\item{sampCol}{Character: The column name with the sampled individual information.
Default is \code{'SAMPLE'}.}

\item{locusCol}{Character: The column name with the locus information.
Default is \code{'LOCUS'}.}

\item{genoCol}{Character: The column name with the genotype information.
Default is \code{'GT'}.}

\item{popCol}{Character: An optional argument. The column name with the
population information. Default is \code{NULL}. If specified, genotype
replacement at each locus is done per population, not across all
sampled individuals.}
}
\description{
For each locus, missing genotypes are replaced with the most common
genotype. Can be done across all sampled individuals or by population.
Loci must be biallelic.
}
\details{
NOTE: it is recommended that missing genotypes are imputed using
inferences of linkage and genotype likelihood. However, if you need
a quick-and-dirty approach, this function might be useful for
preliminary analyses, or if missing data is very low.

If genotypes are coded as characters, \code{NA} or \code{'./.'}
should be used to code missing genotypes. Otherwise if genotypes
are coded as integers, \code{NA} should code missing genotypes.
Whether the most common genotype is estimated across individuals or
for each population depends on parameterisation of \code{popCol}.
}
\examples{
library(genomalicious)

data(data_4pops)

D <- data_4pops \%>\% copy

# Sites with missing data
D[sample(1:nrow(D), round(0.1*nrow(D)), FALSE), GT:=NA] \%>\%
 setnames(., 'GT', 'GT.MISS')

# Replace across individuals
D.rep.inds <- replace_miss_genos(
   dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS'
) \%>\%
   setnames(., 'GT', 'GT.INDS')

# Replace within populations
D.rep.pops <- replace_miss_genos(
   dat=D, sampCol='SAMPLE', locusCol='LOCUS', genoCol='GT.MISS', popCol='POP'
) \%>\%
   setnames(., 'GT', 'GT.POPS')

# Tabulate comparisons between methods
compReplace <- left_join(
   data_4pops[, c('LOCUS','SAMPLE','POP','GT')],
   D[, c('LOCUS','SAMPLE','POP','GT.MISS')]
) \%>\%
.[is.na(GT.MISS), !'GT.MISS'] \%>\%
   left_join(., D.rep.inds[,c('LOCUS','SAMPLE','POP','GT.INDS')]) \%>\%
   left_join(., D.rep.pops[,c('LOCUS','SAMPLE','POP','GT.POPS')])

# Number of correct matches is slightly higher when using the most
# common genotype within populations
compReplace[GT==GT.INDS] \%>\% nrow
compReplace[GT==GT.POPS] \%>\% nrow


}
