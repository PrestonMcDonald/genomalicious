% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mitogenome_feat_repos.R
\name{mitogenome_feat_repos}
\alias{mitogenome_feat_repos}
\title{Reposition a table of mitogenome features}
\usage{
mitogenome_feat_repos(
  featuresDT,
  new_start_pos,
  feat_base_zero,
  genome_len = NULL
)
}
\arguments{
\item{featuresDT}{Data.table: Contains the genomic features. Requires only
two columns: \code{$START} and \code{$END}, which are the start and end base
positions for each a feature. Each row is a unique feature.}

\item{new_start_pos}{Integer: The new starting position for the features.
Must be a value >= 2 and must be <= \code{genome_len}. It must be on the same scale
as \code{feat_base_zero}.}

\item{feat_base_zero}{Logical: Do the base positions in \code{featuresDT$START}
and \code{featuresDT$END} have a base value of zero. In other words, does the
count start at 0 (the first base)? See Details.}

\item{genome_len}{Integer: The genome length, assuming the circular chromosome
has been linearised. If unspecified, it takes on the value of \code{max(featuresDT$END)}.
It must be one the same scale as \code{feat_base_zero}. Default is NULL.}
}
\value{
Returns a data.table with same structure as \code{featuresDT}, but
features have new start and end positions as specified by the repositioning
value of \code{new_start_pos}. If\code{feat_base_zero==TRUE}, then the
values are returned as base 0, otherwise they are returned as base 1.
}
\description{
Takes a data table of mitogenome features a reposisitions it relative to a
new start position. Could be used to reposition genomic features of any
circular chromosome.
}
\details{
Consider the sequence: ATATAGCCG. The first base 'A', would have have
a numbering value of 0 and 1 for base 0 and 1, respectively. Likewise, the
last base, 'G', would have a value of 8 or 9. \cr\cr

Repositioning is done with respect to the initial base level. So to achieve
the split ATAT|AGCCG, \code{new_start_pos==4} for \code{feat_base_zero==TRUE},
and \code{new_start_pos==5} for \code{feat_base_zero==FALSE}.

NOTE: In this iteration of the function, it is possible that a feature can
be split, such that it is separated into sections on the left and right end
of a linear sequence (by virtue of the circularity of the mitogenome).
However, once this split has been made, there is no current functionality to
reverse the output (i.e. to merge a feature that has been split into sections).
}
\examples{
#' library(genomalicious)

# Create a link to raw external datasets in genomalicious
genomaliciousExtData <- paste0(find.package('genomalicious'), '/extdata')

# Read in a GENBANK file of the Bathygobius cocosensis mitogenome
gbk.read <- mitoGbk2DT(paste(genomaliciousExtData, 'data_Bcocosensis.gbk', sep='/'))
head(gbk.read)

# Reposition to start at COX1
gbk.read[NAME=='COX1']

reposCOX1 <- mitogenome_feat_repos(
  featuresDT=gbk.read,
  new_start_pos=5495,
  feat_base_zero=FALSE,
  genome_len=16692
)

reposCOX1[NAME=='COX1']

# Reposition in the middle of COX1
reposMidCOX1 <- mitogenome_feat_repos(
  featuresDT=gbk.read,
  new_start_pos=6272,
  feat_base_zero=FALSE,
  genome_len=16692
)

reposMidCOX1[NAME=='COX1']

}
