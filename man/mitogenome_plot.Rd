% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mitogenome_plot.R
\name{mitogenome_plot}
\alias{mitogenome_plot}
\title{Plot a mitogenome}
\usage{
mitogenome_plot(
  mitoDT,
  genome_len = NULL,
  gene_colour = NULL,
  gene_type = c("gene", "rRNA"),
  extra_type = c("tRNA", "D-loop"),
  plot_xmax = genome_len,
  extra_ypos = 3,
  plot_ymax = 5,
  gene_txt_size = 4,
  extra_txt_size = 4,
  font = "Arial",
  gene_border = NA
)
}
\arguments{
\item{mitoDT}{Data.table: mitogenome information. Requires the columns: \cr
\enumerate{
   \item $NAME = Character, the name of the genetic feature.
   \item $TYPE = Character, the type of genetic feature.
   \item $STRAND = Integer, the starnd, either 1 or -1.
   \item $START = Integer, the starting base position.
   \item $END = Integer, the ending base position.
}}

\item{genome_len}{Integer: the genome length. Default = NULL. If unspecified,
will be assigned the length of the last genetic feature in \code{mitoDT}.}

\item{gene_colour}{Character: a vector of colours to plot genes. Each item
is a colour, with the gene accessible through \code{names(gene_colour)}.
See Details for parameterisation.}

\item{gene_type}{Character: a vector of values present in \code{mitoDT$TYPE}
that will be plotted as large coloured bars. For plotting purposes,
"gene features". Default = \code{c('gene', 'rRNA')}.
See Details for parameterisation.}

\item{extra_type}{Character: a vector of values present in \code{mitoDT$TYPE}
that will be plotted as small grey bars. For plotting purposes, "extra features".
Default = \code{c('tRNA', 'D-loop')}. See Details for parameterisation.}

\item{plot_xmax}{Numeric: a single value, the maximum x-axis limit.
Default is the genome length, as per \code{genome_len}.}

\item{extra_ypos}{Numeric: a single value, the starting y-axis position for
extra features. See Details for parameterisation.}

\item{plot_ymax}{Numeric: a single value, the maximum y-axis limit.
See Details for parameterisation.}

\item{gene_txt_size}{Integer: a single value, the size for gene feature labels.
Default is 4.}

\item{extra_txt_size}{Integer: a single value, the size for extra feature labels.
Default is 4.}

\item{font}{Character: a single value, the font family to use.
Default is \code{'Arial'}.}

\item{gene_border}{Character: a single value, the colour for borders around
gene features. Default is NA, no border.}
}
\value{
Returns a gg object.
}
\description{
Uses base positions information to make a linear plot of genetic features.
Optimised to illustrate mitogenomes, but could be used for other genomic
regions (not rigorously tested).
}
\details{
There are two major features plotted, "gene features" and
"extra features". These names are just for convention: gene features are
plotted as large coloured bars in center of the plot, whereas extra features are
plotted as small grey bars above/below the gene features.
Anything could be plotted as a gene or extra feature, and these are
specified through \code{gene_type} and \code{extra_type}.

The value of \code{mitoDT$STRAND} dictates the position of the coloured bars.
A value of 1 places "genes" on the top of the genomic strand, whereas a value
of -1 places "genes" below the genomic strand.

The colour of the gene features is specified through \code{gene_colour} as
a named vector. If there are two genes, 'COX1' and 'COX2', specification of
their colours can be done like so: \code{c(COX1='pink', COX2='blue')}.
If colours are not specified, one colour is automatically assigned to each
unique "gene".

The value of \code{extra_ypos} specifies that distance of the extra features
from the gene features. Set larger if things are looking squashed.
Additionally, \code{plot_ymax} sets the maximal plotting area, so set this
value larger if things are not fitting well.
}
\examples{
library(genomalicious)

# Create a link to raw external datasets in genomalicious
genomaliciousExtData <- paste0(find.package('genomalicious'), '/extdata')

# Read in a GENBANK file of the Bathygobius cocosensis mitogenome
gbk.read <- mitoGbk2DT(paste(genomaliciousExtData, 'data_Bcocosensis.gbk', sep='/'))
head(gbk.read)

# Subset out the "CDS" types and plot genes, rRNA, tRNA, and D-loop.
# Rename rRNAs for nicer plotting.
gbk.read[TYPE!='CDS'] \%>\%
.[NAME=='12S ribosomal RNA', NAME:='12S rRNA'] \%>\%
.[NAME=='16S ribosomal RNA', NAME:='16S rRNA'] \%>\%
mitogenome_plot(mitoDT=., genome_len=16692, extra_txt_size=3)

# Plot just the COX genes and the D-loop as "gene features" with
# custom colours and a border.
gene.col.vec <- c(
'COX1'='royalblue',
'COX2'='firebrick3',
'COX3'='mediumpurple2',
'CYTB'='plum3',
'D-loop'='grey40')

gbk.read[NAME \%in\% c('COX1','COX2','COX3','CYTB','D-loop')] \%>\%
  mitogenome_plot(
    mitoDT=., genome_len=16692,
    gene_type=c('gene', 'D-loop'), gene_colour=gene.col.vec,
    extra_type=NULL, gene_border=TRUE)

}
